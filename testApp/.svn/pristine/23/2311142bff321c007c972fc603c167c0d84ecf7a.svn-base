/*********************************************************************\
*                                                                     *
*   Autor : Dejan Martinov RA94/2013                                  *
*                                                                     *
*   Datum : 22.10.2017.                                               *
*                                                                     *
 *********************************************************************
*                                                                     *
* Zadatak : Napraviti modul koji predstavlja stek. Modul izvesti kao  *
*   dinamicku  biblioteku  (deljeni objekat). Napisati  program koji  *
*   ucitava sliku iz datoteke u formi matrice nula i jedinica. Zatim  *
*   napisati funkciju koja krece od  zadatog piksela i pronalazi sve  *
*   piksele iste vrednosti  koji su susedi  njegovim  istovrednosnim  *
*   susedima, itd. Uzeti u obzir da je na pretpostavljenom namenskom  *
*   procesoru maksimalna dubina poziva  funkcija  4. Deljeni objekat  *
*   koji  predstavlja  stek  dinamicki povezati tokom izvrsavanja. U  *
*   resenju se osloniti na strukturu reda iz modula.                  *
*                                                                     *
 *********************************************************************
*                                                                     *
* Opis resenja :
*/

#include "imageProcessing.h"
#include "stack.h"


int main(int argc, char* argv[])
{
	void* handle;
	void (*initFunc)(stek*);
	void (*pushFunc)(stek*, koordinate);
	koordinate (*popFunc)(stek*);
	char* error;

	handle = dlopen("/home/rtrk/Eclipse-workspace/stackModule/Debug/libstackModule.so", RTLD_LAZY);
	if(handle == NULL)
	{
		fputs(dlerror(), stderr);
		exit(1);
	}

	initFunc = dlsym(handle, "inicijalizacijaSteka");
	if((error = dlerror()) != NULL)
	{
		fputs(error, stderr);
		exit(1);
	}

	pushFunc = dlsym(handle, "push");
	if((error = dlerror()) != NULL)
	{
		fputs(error, stderr);
		exit(1);
	}

	popFunc = dlsym(handle, "pop");
	if((error = dlerror()) != NULL)
	{
		fputs(error, stderr);
		exit(1);
	}

	return EXIT_SUCCESS;
}
